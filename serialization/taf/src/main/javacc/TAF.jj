/* Copyright (C) 2015 TU Dortmund
 * This file is part of AutomataLib, http://www.automatalib.net/.
 * 
 * AutomataLib is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License version 3.0 as published by the Free Software Foundation.
 * 
 * AutomataLib is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with AutomataLib; if not, see
 * http://www.gnu.de/documents/lgpl.en.html.
 */

options {
	LOOKAHEAD = 1;
	STATIC = false;
	DEBUG_PARSER = false;
	SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
}

PARSER_BEGIN(InternalTAFParser)

package net.automatalib.serialization.taf.parser;

import java.util.Collections;
import java.util.Collection;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;

import java.text.MessageFormat;

import net.automatalib.words.Alphabet;
import net.automatalib.words.impl.Alphabets;
import net.automatalib.words.impl.SimpleAlphabet;
import net.automatalib.commons.util.strings.StringUtil;

class InternalTAFParser {

	private TAFParseDiagnosticListener listener;

	public void error(String fmtString, Object... args) {
		if (listener != null) {
			listener.error(getLine(), getCol(), fmtString, args);
		}
	}
	
	public void warning(String fmtString, Object... args) {
		if (listener != null) {
			listener.error(getLine(), getCol(), fmtString, args);
		}
	}
	
	public void fatal(String fmtString, Object... args) {
		throw new TAFParseException("At line " + getLine() + ", column " + getCol() + ": "
			+ MessageFormat.format(fmtString, args));
	}
	
	public void setDiagnosticListener(TAFParseDiagnosticListener listener) {
		this.listener = listener;
	}
	
	private int getLine() {
		return token.beginLine;
	}
	
	private int getCol() {
		return token.beginColumn;
	}
}

PARSER_END(InternalTAFParser)

SKIP :
{
	" "
|	"\r"
|	"\t"
|	"\n"
}

TOKEN [IGNORE_CASE]:
{
	< DFA: "dfa" >
|	< MEALY: "mealy" >
}

TOKEN:
{
	< LBRACK: "[" >
|	< RBRACK: "]" >
|	< DOTS: ".." >
|	< LBRACE: "{" >
|	< RBRACE: "}" >
|	< COMMA: "," >
|	< SLASH: "/" >
|	< ARROW: "->" >
|	< LC_ALPHA: ["a"-"z"] >
|	< ID: ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","0"-"9","_"])* >
}

SKIP:
{
	< BEGIN_QID: "\"" > : IN_QID
}

<IN_QID> TOKEN:
{
	< QID: ("\\\""|~["\""])+ >
}

<IN_QID> SKIP:
{
	< END_QID: "\"" > : DEFAULT
}

SKIP:
{
	< BEGIN_LINE_COMMENT: "//" > : IN_LINE_COMMENT
|	< BEGIN_BLOCK_COMMENT: "/*" > : IN_BLOCK_COMMENT
}

<IN_LINE_COMMENT> SKIP:
{
	< END_LINE_COMMENT: "\n" > : DEFAULT
|	< ~[] >
}


<IN_BLOCK_COMMENT> SKIP:
{
	< END_BLOCK_COMMENT: "*/" > : DEFAULT
|	< ~[] >
}

Alphabet<String> charStringRange():
{
	char l, r;
}
{
	<LBRACK> l=singleChar() <DOTS> r=singleChar() <RBRACK>
	{
		if (l > r) {
			error("Invalid character range [{0}..{1}]", l, r);
			return null;
		}
		return Alphabets.closedCharStringRange(l, r);
	}
}

Alphabet<String> stringSet():
{
	Alphabet<String> result = new SimpleAlphabet<String>();
	String s;
}
{
	<LBRACE>
	s=string() { result.add(s); } ( <COMMA> s=string() { result.add(s); } )*
	<RBRACE>
	{ return result; }
}

char singleChar():
{
	Token t;
}
{
	t=<LC_ALPHA> { return t.toString().charAt(0); }
}


Alphabet<String> stringCollection():
{
	Alphabet<String> sc;
	String s;
}
{
	(
	sc=charStringRange()
|	sc=stringSet()
|	s=string() { sc = Alphabets.singleton(s); }
	)
	{ return sc; }
}


String identifier():
{
	Token t;
}
{
	t=<ID> { return t.toString(); }
|	t=<LC_ALPHA> { return t.toString(); }
}

String string():
{
	String s;
	Token t;
}
{
	(
	s=identifier()
|	t=<QID> { s = StringUtil.unescapeQuotes(t.toString()); }
	)
	{ return s; }
}

Set<String> stateOpts():
{
	Set<String> result = Collections.emptySet();
	String s;
}
{
	[
	<LBRACK>
	s=identifier() { result = new HashSet<String>(); result.add(s); }
	(<COMMA> s=identifier() { result.add(s); })*
	<RBRACK>
	]
	{ return result; }
}

Type type():
{}
{
	<DFA> { return Type.DFA; }
|	<MEALY> { return Type.MEALY; }
}

void dfa(TAFBuilderDFA builder):
{}
{
	<DFA> dfaBody(builder)
}

void dfaBody(TAFBuilderDFA builder):
{
	Alphabet<String> alphabet;
}
{
	alphabet=stringCollection()
	{
		if (alphabet == null) {
			fatal("No valid alphabet specified");
		}
		builder.init(alphabet);
	}
	<LBRACE>
	( stateDeclDfa(builder) )*
	<RBRACE>
}

void stateDeclDfa(TAFBuilderDFA builder):
{
	String id;
	Set<String> opts;
}
{
	id=identifier() opts=stateOpts()
	{ builder.declareState(id, opts); }
	transBlockDfa(builder, id)
}

void transBlockDfa(TAFBuilderDFA builder, String source):
{}
{
	<LBRACE>
	( transDeclDfa(builder, source) )*
	<RBRACE>
}

void transDeclDfa(TAFBuilderDFA builder, String source):
{
	Collection<String> symbols;
	String tgt;
}
{
	symbols=stringCollection() <ARROW> tgt=identifier()
	{ if (symbols != null) { builder.addTransitions(source, symbols, tgt); } }
}

void mealy(TAFBuilderMealy builder):
{}
{
	<MEALY> mealyBody(builder)
}

void mealyBody(TAFBuilderMealy builder):
{
	Alphabet<String> alphabet;
}
{
	alphabet=stringCollection()
	{
		if (alphabet == null) {
			fatal("No valid alphabet specified");
		}
		builder.init(alphabet);
	}
	<LBRACE>
	( stateDeclMealy(builder) )*
	<RBRACE>
}

void stateDeclMealy(TAFBuilderMealy builder):
{
	String id;
	Set<String> opts;
}
{
	id=identifier() opts=stateOpts()
	{ builder.declareState(id, opts); }
	transBlockMealy(builder, id)
}

void transBlockMealy(TAFBuilderMealy builder, String source):
{}
{
	<LBRACE>
	( transDeclMealy(builder, source) )*
	<RBRACE>
}

void transDeclMealy(TAFBuilderMealy builder, String source):
{
	Collection<String> symbols;
	String output = null;
	String tgt;
}
{
	symbols=stringCollection() [<SLASH> output=string()] <ARROW> tgt=identifier()
	{ if (symbols != null) { builder.addTransitions(source, symbols, output, tgt); } }
}

